import pandas as pd
import glob
import os
import json


def explore_data_modern(df, name):
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞: {name}")

    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    analysis = pd.DataFrame({
        '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö': df.dtypes,
        '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö': df.nunique(),
        '–ü—Ä–æ–ø—É—Å–∫–æ–≤': df.isnull().sum(),
        '% –ü—Ä–æ–ø—É—Å–∫–æ–≤': (df.isnull().mean() * 100).round(1),
        '–ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è': df.iloc[0] if len(df) > 0 else None
    }).sort_values('–ü—Ä–æ–ø—É—Å–∫–æ–≤', ascending=False)

    # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
    styled_analysis = analysis.style \
        .background_gradient(subset=['–ü—Ä–æ–ø—É—Å–∫–æ–≤', '% –ü—Ä–æ–ø—É—Å–∫–æ–≤'], cmap='Reds') \
        .format({'% –ü—Ä–æ–ø—É—Å–∫–æ–≤': '{:.1f}%'})

    return styled_analysis


def print_unique(df, column):
    for i, value in enumerate(df[column].unique(), 1):
        print(f"{i}. {value}")


SESSIONS_FRAME = 'sessions'
HITS_FRAME = 'hits'


def save_frame(df, frame_name, comment):
    timestamp = pd.Timestamp.now().strftime("%Y%m%d_%H%M")
    path = f'../data/processed/'
    filename = f'{path}{frame_name}_{timestamp}.pkl'
    df.to_pickle(filename)
    log_file = f'../data/processed/log_{frame_name}.txt'
    with open(log_file, "a", encoding="utf-8") as file:
        file.write(f"{timestamp}: {comment}\n")

    print(f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename} | –õ–æ–≥: {log_file}')


def load_best_params(json_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ JSON —Ñ–∞–π–ª–∞
    Args:
        json_path: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –º–æ–¥–µ–ª–∏ –∏ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    with open(json_path, 'r') as f:
        params = json.load(f)

    return params


def load_latest_params(results_dir='../data/models/hyper'):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–∞–º–æ–≥–æ —Å–≤–µ–∂–µ–≥–æ JSON —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    Args:
        results_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–∞–π–ª–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –º–æ–¥–µ–ª–∏ –∏ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """

    # –ò—â–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    files = glob.glob(f"{results_dir}/best_params_*.json")

    if not files:
        raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ {results_dir}")

    # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª
    latest_file = max(files, key=os.path.getctime)
    params = json.load(open(latest_file, 'r'))
    return {
        'iterations': params['iterations'],
        'depth': params['depth'],
        'learning_rate': params['learning_rate'],
        'l2_leaf_reg': params['l2_leaf_reg'],
        'random_seed': 42,
        'task_type': 'GPU',
        'devices': '0',
        'auto_class_weights': 'Balanced',
        'verbose': 0
    }


def get_season(month):
    if month < 3 or month == 12:
        return 'winter'
    if month < 6:
        return 'spring'
    if month < 9:
        return 'summer'
    return 'autumn'


def time_of_day(hour):
    if 5 <= hour < 10:
        return 'morning'
    if 10 <= hour < 17:
        return 'day'
    if 17 <= hour < 22:
        return 'evening'
    return 'night'


def is_peak_hour(hour):
    morning_peak = 7 <= hour <= 10  # –£—Ç—Ä–µ–Ω–Ω–∏–π —á–∞—Å –ø–∏–∫ 7:00-10:00
    evening_peak = 17 <= hour <= 20  # –í–µ—á–µ—Ä–Ω–∏–π —á–∞—Å –ø–∏–∫ 17:00-20:00
    return 1 if morning_peak or evening_peak else 0
